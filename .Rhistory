# Variable Assignments
var_one <- 1
var_two = 2
var_one<-var_two <- 3
4 -> var_one
# Integer
var_int <- 1L
# Character
var_char <- "Northeastern Univeristy"
typeof(var_char)
# Date Data Type
var_date  <- as.Date("2012-06-28")
var_one <- 1
var_two <- 2
vec <- c(1L, 2L, 3L, 4L, 5L, 6L, 7L)
vec <- c(1, 2, 3, 4, 5, 6, 7)
vec <- c("a", "b", "c")
typeof(vec)
vec <- c(1, 2, 3, 4, 5, 6, 7)
typeof(vec)
vec <- c("a", "b", "c")
typeof(vec)
# Coercing vectors
# Acccesing/subsetting elements in a vector using index values
vec <- c(10, 20, 30, 40, 50, 60, 70)
# Comparing vectors with individual elements
vec <- 1:10
# Coercing matrices
mat_two[1,2] <- "20"
# Aggregation functions on matrix
mat_two <- matrix(1:6, nrow = 2, ncol = 3)
# Subsetting data frame using which function
row_ind <- which(df$name == "a")
vec_one <- 1:4
vec_two <- 1:4
resultant_vec <- vec_one + vec_two
resultant_vec <- vec_one * vec_two
#-----------------------------------------------------------------------------------------------
# Creating matrices
mat_one <- matrix(0, nrow = 2, ncol = 3)
#-----------------------------------------------------------------------------------------------
# Creating matrices
mat_one <- matrix(0, nrow = 2, ncol = 3)
colnames(mat_two) <- c("A", "B", "C")
rownames(mat_two) <- c("D", "E
install.packages(c("dataQualityR", "dplyr", "lubridate", "magrittr", "stringr"))
cime <- read.csv("C:/Users/Pradeep/Downloads/tmpo8o6b_6z.csv", stringsAsFactors=FALSE)
View(cime)
# Data frame based coding approaches-----------------------------
# Read data
# Explore data
head(crime)
View(cime)
crime <- read.csv("C:/Users/Pradeep/Downloads/tmpo8o6b_6z.csv", stringsAsFactors=FALSE)
View(crime)
# Data frame based coding approaches-----------------------------
# Read data
# Explore data
head(crime)
summary(crime)
# Check data type of columns-----------------
typeof(crime$OFFENSE_CODE)
# Check for missing values
is.na(crime$SHOOTING)
which(is.na(crime$SHOOTING))
which(is.na(crime$SHOOTING))
t<-which(is.na(crime$SHOOTING))
summary(crime)
# Check data type of columns-----------------
typeof(crime$OFFENSE_CODE)
# Check for missing values
is.na(crime$SHOOTING)
length(which(is.na(crime$SHOOTING)))
t<-length(is.na(crime$SHOOTING))
num.file <- paste("/Users/Sri/Desktop/Lecture 4", "/numerical.csv", sep= "")
# Take help of data quality package
library(dataQualityR)
install.packages("dataQualityR")
num.file <- paste("/Users/Sri/Desktop/Lecture 4", "/numerical.csv", sep= "")
num.file <- paste("D:\SEM 2\New folder", "/numerical.csv", sep= "")
library(readr)
crime <- read_csv("C:/Users/Pradeep/Downloads/tmpo8o6b_6z.csv")
View(crime)
length(which(is.na(crime$SHOOTING)))
t<-length(is.na(crime$SHOOTING))
# Check for missing values
is.na(crime$SHOOTING)
t<-length(is.na(crime$SHOOTING))
# Take help of data quality package
library(dataQualityR)
num.file <- paste("/D/SEM 2/New folder", "/numerical.csv", sep= "")
cat.file <- paste("/D/SEM 2/New folder", "/categorical.csv", sep= "")
cat.file <- paste("/D/SEM 2/New folder", "/categorical.csv", sep= "")
num.file <- paste("D:\SEM 2\New folder", "/numerical.csv", sep= "")
num.file <- paste("\Users\Pradeep", "/numerical.csv", sep= "")
num.file <- paste("\users\Pradeep", "/numerical.csv", sep= "")
num.file <- paste("users\Pradeep", "/numerical.csv", sep= "")
num.file <- paste("C:\Users\Pradeep", "/numerical.csv", sep= "")
cat.file <- paste("C:\Users\Pradeep", "/categorical.csv", sep= "")
num.file <- paste("C:/Users/Pradeep", "/numerical.csv", sep= "")
cat.file <- paste("C:/Users/Pradeep", "/categorical.csv", sep= "")
num.file <- paste("D:/SEM 2/New folder", "/numerical.csv", sep= "")
cat.file <- paste("D:/SEM 2/New folder", "/categorical.csv", sep= "")
num.file <- paste("D:/SEM 2/New folder", "/numerical.csv", sep= "")
cat.file <- paste("D:/SEM 2/New folder", "/categorical.csv", sep= "")
checkDataQuality(data= crime, out.file.num= num.file, out.file.cat= cat.file)
# Select Columns
# Selecting columns with numerical values
crime$REPORTING_AREA
crime$REPORTING_AREA[1:10]
# Common Issue
ind<-which(crime$OFFENSE_CODE_GROUP=="Assistance")
num.file <- paste("D:/SEM 2/New folder", "/numerical.csv", sep= "")
cat.file <- paste("D:/SEM 2/New folder", "/categorical.csv", sep= "")
checkDataQuality(data= crime, out.file.num= num.file, out.file.cat= cat.file)
install.packages("stringr")
library(stringr)
# Find matching strings
str_detect(crime$OFFENSE_CODE_GROUP, "Medical Assistance")
t<-str_which(crime$OFFENSE_CODE_GROUP, "Assistance")
t2<-str_count(crime$OFFENSE_CODE_GROUP, "Medical Assistance")
t<-str_which(crime$OFFENSE_CODE_GROUP, "Assistance")
t2<-str_which(crime$OFFENSE_CODE_GROUP, "Medical Assistance")
str_count(crime$OFFENSE_CODE_GROUP, "Medical Assistance")
str_locate(crime$OFFENSE_CODE_GROUP, "Medical")
# Subset strings
str_sub(crime$OFFENSE_CODE_GROUP, start=1, end=4)
str_subset(crime$OFFENSE_CODE_GROUP, "Medical")
str_extract(crime$OFFENSE_CODE_GROUP, "Medical")
# Length of strings
str_length(crime$OFFENSE_CODE_GROUP)
# Length of strings
str_length(crime$"northeatsern university")
# Length of strings
str_length("northeastern university")
# Join strings
str_c(crime$DISTRICT,crime$REPORTING_AREA)
install.packages("lubridate")
cime$extract<-0
cime$extractedyer<-0
crime$extractedyer<-0
extractedyer<-str_sub(crime$OCCURRED_ON_DATE,start=1,end=4)
crime$extractedyer<-str_sub(crime$OCCURRED_ON_DATE,start=1,end=4)
crime$extractedyer2<-stringr::word(crime$OCCURRED_ON_DATE,1,sep="-")
dt <- as_datetime(crime$OCCURRED_ON_DATE)
dt<- as_datetime(crime$OCCURRED_ON_DATE)
# 2. Ability to manipulate date
library(lubridate)
dt<- as_datetime(crime$OCCURRED_ON_DATE)
# Extract year, month, week, day, time etc from date time format
extracted_year<-year(dt)
extracted_month<-month(dt)
dt<- as_datetime(crime$OCCURRED_ON_DATE)
extracted_month<-month(dt),lable=TRUE)
extracted_month<-month(dt,lable=TRUE)
extracted_month<-month(dt,label =TRUE)
nydata <- read.csv("C:/Users/Pradeep/Downloads/Motor_Vehicle_Collisions_-_Crashes.csv", header=FALSE, na.strings="", stringsAsFactors=FALSE)
View(nydata)
install.packages("dplyr")
df1<-sample_frac(nydata, 0.1, replace = TRUE)
library(dplyr)
df1<-sample_frac(nydata, 0.1, replace = TRUE)
# Data Aggregation------------------
# One function, one variable
summarise(nydata, total_ped_inj=sum(NUMBER.OF.PEDESTRIANS.INJURED))
v<-transmute(nydata, NUMBER.OF.PERSONS.INJURED)
v<-transmute(nydata, NUMBER OF PERSONS INJURED)
# One function, one variable using group_by function
summarise(group_by(nydata,BOROUGH), total_ped_inj=sum(NUMBER.OF.PEDESTRIANS.INJURED))
# Data Aggregation------------------
# One function, one variable
summarise(nydata, total_ped_inj=sum(NUMBER.OF.PEDESTRIANS.INJURED))
View(df1)
View(nydata)
# Many function, multiple variable
summarise(nydata, total_ped_inj=sum(NUMBER.OF.PEDESTRIANS.INJURED), max_ped_inj=max(NUMBER.OF.PERSONS.INJURED))
x<-2L
typeof(y)
typeof(x)
x+y
y<-2.5
x+y
#complex
z<-3+2i
typeof(z)
d<-"f"
typeof(d)
crime <- read.csv("D:/SEM 2/New folder/homework/hw1/crime.csv", na.strings="", stringsAsFactors=FALSE)
View(crime)
sample<-crime[1:1000,c(8,15,16)]
View(sample)
View(sample)
na.omit(sample<-crime[1:1000,c(8,15,16)])
sample<-crime[1:1000,c(8,15,16)]
sample<-crime[1:100000,c(7,8,15,16)]
#replace na wth zero
ind<-which(is.na(sample$SHOOTING))
sample$SHOOTING[ind]<-0
sample$OCCURRED_ON_DATE<-as_date(sample$OCCURRED_ON_DATE)
library(lubridate)
sample$OCCURRED_ON_DATE<-as_date(sample$OCCURRED_ON_DATE)
temp<-sample%>%filter(Lat!=-1,Long!=1,Long!=-0,Long!=0)
temp<-sample%>%filter(Lat!=-1,Long!=1,Long!=-0,Long!=0)
library(tidyr)
temp<-sample%>%filter(Lat!=-1,Long!=1,Long!=-0,Long!=0)
temp<-sample%>%filter(Lat!=-1,Long!=1,Lat!=-0,Long!=0)
temp<-sample%>%filter(Lat!=-1,Long!=1,Lat!=-0,Long!=0)
corona <- read.csv("D:/SEM 2/New folder/corona.csv", header=FALSE, na.strings="", stringsAsFactors=FALSE)
View(corona)
View(corona)
View(corona)
library(readr)
corona <- read_csv("D:/SEM 2/New folder/corona.csv")
View(corona)
sample<-corona[,c(2,5:49)]
sample<-corona[,c(2, 5:49)]
sample<-corona[,c(2, 5:49)]
sample<-corona%>%select(2,c(5:40))
sample<-corona[,c(2,5:40)]
View(sample)
View(sample)
temp<-sample%>%group_by('country/Region')%>%summarise_all(funs(sum))
library(dplyr)
temp<-sample%>%group_by('country/Region')%>%summarise_all(funs(sum))
temp<-sample%>%group_by('Country/Region')%>%summarise_all(funs(sum))
head(sample)
str(sample)
temp<-sample%>%group_by('Country/Region')%>%summarise_all(funs(sum))
View(sample)
library(readr)
corona <- read_csv("D:/SEM 2/New folder/corona.csv")
View(corona)
sample<-corona[,c(2,5:40)]
temp<-sample%>%group_by('Country/Region')%>%summarise_all(funs(sum))
sample<-corona[,c(2,5:40)]
library(readr)
corona <- read_csv("D:/SEM 2/New folder/corona.csv")
View(corona)
sample<-corona[,c(2,5:40)]
temp<-sample%>%group_by('Country/Region')%>%summarise_all(funs(sum))
temp<-sample%>%group_by('Country/Region')%>%summarise_all(funs(sum))
str(sample)
temp<-sample%>%group_by(`Country/Region`)%>%summarise_all(funs(sum))
View(temp)
View(temp)
ayment_System<-market_data%>%select("State","Credit","WIC","WICcash","SFMNP","SNAP")%>%group_by(State)%>%summarise(creditacceptingstores=sum(Credit,na.rm = TRUE),WICacceptingstores=sum(WIC,na.rm = TRUE),WICcashacceptingstores=sum(WICcash,na.rm = TRUE),SFMPAcceptingstores=sum(SFMNP,na.rm = TRUE),SNAPAcceptingstores=sum(SNAP,na.rm = TRUE))
Payment_System<-merge(Payment_System,Region_data,by.x = "State",by.y = "State")
Payment_System<-Payment_System%>%select(-State)%>%group_by(Region)%>%summarise(WICStores=sum(WICacceptingstores),SFMPAStores=sum(SFMPAcceptingstores),CreditStores=sum(creditacceptingstores),WICCASHStores=sum(WICcashacceptingstores),SNAPStores=sum(SNAPAcceptingstores))
setwd("D:/SEM 2/New folder/project/project 1")
#Libraries Used
library(dplyr)
library(ggplot2)
library(tidyr)
library(hrbrthemes)
library(lubridate)
library(ggplot2)
library(reshape2)
#importing the raw data(fmarket.csv) in to the R studio
market_data<-read.csv("fmarket.csv",stringsAsFactors =FALSE,na.strings="")
Region_data<-read.csv("RegionsUSA.CSV",stringsAsFactors =FALSE,na.strings="")
grants_data<-read.csv("grants.csv",stringsAsFactors =FALSE,na.strings="")
#data cleaning for required rows
Region_data$State<-tolower(Region_data$State)
market_data$State<-tolower(market_data$State)
market_data$Location<-tolower(market_data$Location)
market_data$Credit[market_data$Credit=="Y"]<-1
market_data$Credit[market_data$Credit=="N"]<-0
market_data$Credit<-as.integer(market_data$Credit)
market_data$WIC[market_data$WIC=="Y"]<-1
market_data$WIC[market_data$WIC=="N"]<-0
market_data$WIC<-as.integer(market_data$WIC)
market_data$WICcash[market_data$WICcash=="Y"]<-1
market_data$WICcash[market_data$WICcash=="N"]<-0
market_data$WICcash<-as.integer(market_data$WICcash)
market_data$SFMNP[market_data$SFMNP=="Y"]<-1
market_data$SFMNP[market_data$SFMNP=="N"]<-0
market_data$SFMNP<-as.integer(market_data$SFMNP)
market_data$SNAP[market_data$SNAP=="Y"]<-1
market_data$SNAP[market_data$SNAP=="N"]<-0
market_data$SNAP<-as.integer(market_data$SNAP)
grants_data$FY2012<-gsub("[[:punct:]]", "", grants_data$FY2012)#removing punctuations
grants_data$FY2012<-gsub("[[:blank:]]", "", grants_data$FY2012)#removing blanks
grants_data$FY2012<-as.integer(grants_data$FY2012)
grants_data$FY2013<-gsub("[[:punct:]]", "", grants_data$FY2013)#removing punctuations
grants_data$FY2013<-gsub("[[:blank:]]", "", grants_data$FY2013)#removing blanks
grants_data$FY2013<-as.integer(grants_data$FY2013)
grants_data$FY2014<-gsub("[[:punct:]]", "", grants_data$FY2014)#removing punctuations
grants_data$FY2014<-gsub("[[:blank:]]", "", grants_data$FY2014)#removing blanks
grants_data$FY2014<-as.integer(grants_data$FY2014)
grants_data$FY2015<-gsub("[[:punct:]]", "", grants_data$FY2015)#removing punctuations
grants_data$FY2015<-gsub("[[:blank:]]", "", grants_data$FY2015)#removing blanks
grants_data$FY2015<-as.integer(grants_data$FY2015)
grants_data$FY2016<-gsub("[[:punct:]]", "", grants_data$FY2016)#removing punctuations
grants_data$FY2016<-gsub("[[:blank:]]", "", grants_data$FY2016)#removing blanks
grants_data$FY2016<-as.integer(grants_data$FY2016)
grants_data$FY2017<-gsub("[[:punct:]]", "", grants_data$FY2017)#removing punctuations
grants_data$FY2017<-gsub("[[:blank:]]", "", grants_data$FY2017)#removing blanks
grants_data$FY2017<-as.integer(grants_data$FY2017)
grants_data$FY2018<-gsub("[[:punct:]]", "", grants_data$FY2018)#removing punctuations
grants_data$FY2018<-gsub("[[:blank:]]", "", grants_data$FY2018)#removing blanks
grants_data$FY2018<-as.integer(grants_data$FY2018)
grants_data$FY2019<-gsub("[[:punct:]]", "", grants_data$FY2019)#removing punctuations
grants_data$FY2019<-gsub("[[:blank:]]", "", grants_data$FY2019)#removing blanks
grants_data$FY2019<-as.integer(grants_data$FY2019)
grants_data$State.Agency<-tolower(grants_data$State.Agency)
#plot based on geographical location
market_geographical<-market_data%>%select(c("FMID","State"))
market_state<-market_geographical%>%group_by(State)%>%count(State)%>%arrange(desc(n))
ggplot(market_state, aes(y = n, x = reorder(State, n),fill=n))+ geom_bar(stat="identity",color="white")+ coord_flip()+ labs(y="Number of Markets", x="States",fill="Number of markets ")+ggtitle("Number of farmer markets in each state ")+theme_bw()+theme(text = element_text(size = 14))+scale_fill_gradient(low="slateblue",high="slateblue4")+theme(plot.title = element_text(hjust = 0.5))
ggsave("glocation.png",height = 7,width = 17.5)
#Graphical analysis by teritory
#merging region data and farmer market data
market_region<-merge(market_geographical,Region_data,by.x = "State",by.y = "State")
market_region<-market_region%>%group_by(Region)%>%count(Region)
ggplot(market_region, aes(y = n, x = reorder(Region, n),fill=n))+ geom_bar(stat="identity")+ coord_flip()+ labs(y="Number of Markets", x="Teritories",fill="Markets count")+(ggtitle("Number of farmer markets in each Region "))+theme_minimal()+theme(text = element_text(size = 14))+theme(plot.title = element_text(hjust = 0.5))+scale_fill_gradient(low="pink",high = "maroon")
ggsave("region.png",height = 7,width = 17.5)
#plot based on residing area
market_area<-select(market_data,c("FMID","Location"))
market_area<-na.omit(market_area%>%group_by(Location)%>%count(Location))%>%arrange(desc(n))
ggplot(market_area, aes(y = n, x = reorder(Location, n),fill=n))+ geom_bar(stat="identity")+ coord_flip()+ labs(y="Number of Markets", x="Location",fill="Market Count")+(ggtitle("Number of farmer markets in each Location "))+theme(plot.title = element_text(hjust = 0.5))+theme_bw()+theme(plot.title = element_text(hjust = 0.5))+theme(text = element_text(size = 14))+scale_fill_gradient(low="green",high = "darkgreen")
ggsave("mktlocation.png",height = 7,width = 17.5,dpi = 300)
#No of markets registered in a year
open_year<-na.omit(select(market_data,c("FMID","Season1Date")))
open_year<-open_year%>%separate(Season1Date, c("Season1Date1","Season1Date2"), sep = "to")%>%select(c(FMID,Season1Date1))
open_year$Season1Date1<-(mdy(open_year$Season1Date1,quiet = TRUE))
open_year$Season1Date1<-year(open_year$Season1Date1)
open_year<-open_year%>%filter(!is.na(Season1Date1))%>%count(Season1Date1)
ggplot(open_year, aes(x=factor(Season1Date1), y=n,group=n ,color=n,size=n)) +geom_line()+ geom_point()+ggtitle("Markets registered in a year")+labs(y="Number of Markets", x="year",color="Markets",size="Size")+coord_flip()+theme_bw()+theme(text = element_text(size = 14))+theme(plot.title = element_text(hjust = 0.5))
ggsave("year.png",height = 7,width = 17.5,dpi = 300)
#markets offering card payments
Payment_System<-market_data%>%select("State","Credit","WIC","WICcash","SFMNP","SNAP")%>%group_by(State)%>%summarise(creditacceptingstores=sum(Credit,na.rm = TRUE),WICacceptingstores=sum(WIC,na.rm = TRUE),WICcashacceptingstores=sum(WICcash,na.rm = TRUE),SFMPAcceptingstores=sum(SFMNP,na.rm = TRUE),SNAPAcceptingstores=sum(SNAP,na.rm = TRUE))
Payment_System<-merge(Payment_System,Region_data,by.x = "State",by.y = "State")
Payment_System<-Payment_System%>%select(-State)%>%group_by(Region)%>%summarise(WICacceptingStores=sum(WICacceptingstores),SFMPAacceptingStores=sum(SFMPAcceptingstores),CreditacceptingStores=sum(creditacceptingstores),WICCASHacceptingStores=sum(WICcashacceptingstores),SNAPacceptingStores=sum(SNAPAcceptingstores))
d <- melt(Payment_System, id.vars="Region")
# Everything on the same plot
ggplot(d, aes(value,Region)) +
geom_point() +
stat_smooth() +theme(text = element_text(size = 14))+
facet_wrap(~variable)+theme_bw()+theme_minimal()+ggtitle("Markets offering card payments ")+theme(plot.title = element_text(hjust = 0.5))+labs(x="Number of Markets ",y="Region")
ggsave("payment.png",height = 7,width = 17.5,dpi = 300)
grant_acceptance<-market_data[c(11,25:28)]
grant_acceptance <- cbind(grant_acceptance,sum=rowSums(grant_acceptance[2:5]))
grant_acceptance<-grant_acceptance%>%filter(sum==4)%>%count(State)
grant_acceptance$nationsaverage<-sum(grant_acceptance$n/52)
ggplot(grant_acceptance, aes(y =n, x = reorder(State,n),fill=ifelse(n>sum(n/52),"Greater than nations average ","Less than nations average")))+ geom_bar(stat="identity")+ coord_flip()+ labs(y="Number of Markets", x="State",fill="Classification ")+(ggtitle("Number of stores accepting all kinds of subsidary payment systems"))+geom_line(aes(State,nationsaverage,group=nationsaverage,color=nationsaverage))+theme(text = element_text(size = 16))+theme_bw()+theme(plot.title = element_text(hjust = 0.5))
ggsave("garnt acceptance.png",height = 7,width = 17.5,dpi = 300)
products_data<-market_data[c(1,11,29:58)]
products_data<-products_data%>%gather(key="Products",value = "Availability",-State,-FMID)
products_data$Products<-tolower(products_data$Products)
Product_catogery<-read.csv("products .csv",stringsAsFactors =FALSE,na.strings="")
Product_catogery$Products<-tolower(Product_catogery$Products)
products_data<-merge(products_data,Product_catogery,by.x = "Products",by.y = "Products")
products_data<-products_data%>%filter(Availability=="Y")
products_data<-merge(products_data,Region_data,by.x = "State",by.y = "State")
products_data<-unique(products_data %>% select(Region,Catogery,FMID))
products_data<-products_data %>% count(Region,Catogery)
ggplot(data = products_data, aes(x=Catogery, y=Region, fill=n)) +
geom_tile()+labs(x="Category",y="Region",fill="No of Prodcuts")+theme(text = element_text(size = 14))+theme_bw()+ggtitle("Count of products in each region")+theme(plot.title = element_text(hjust = 0.5))
ggsave("heatmap.png",height = 7,width = 17.5,dpi = 300)
products_data<-market_data[c(1,11,29:58)]
products_data<-products_data%>%gather(key="Products",value = "Availability",-State,-FMID)
products_data$Products<-tolower(products_data$Products)
Product_catogery<-read.csv("products .csv",stringsAsFactors =FALSE,na.strings="")
Product_catogery$Products<-tolower(Product_catogery$Products)
products_data<-merge(products_data,Product_catogery,by.x = "Products",by.y = "Products")
products_data<-products_data%>%filter(Availability=="Y")
products_data<-merge(products_data,Region_data,by.x = "State",by.y = "State")
products_data<-unique(products_data %>% select(Region,Catogery,FMID))
products_data<-products_data %>% count(Region,Catogery)
ggplot(data = products_data, aes(x=Catogery, y=Region, fill=n)) +
geom_tile()+labs(x="Category",y="Region",fill="No of Prodcuts")+theme(text = element_text(size = 14))+theme_bw()+ggtitle("Count of products in each region")+theme(plot.title = element_text(hjust = 0.5))
ggsave("heatmap.png",height = 7,width = 17.5,dpi = 300)
#sclaing the farmer markets according to the size
market_size<-market_data[c(1,29:58)]
market_size<-market_size%>%gather(key = "PRODCUTS",value = "Product",-FMID)
market_size<-filter(market_size,Product=="Y")
market_size<-market_size%>%count(FMID)
market_size$n<-ceiling(market_size$n/10)
market_size$n[market_size$n=="3"]<-"Large Scale"
market_size$n[market_size$n=="2"]<-"Medium Scale"
market_size$n[market_size$n=="1"]<-"Small Scale"
market_size<-market_size%>%count(n)
colnames(market_size)<-c("markettype","count")
ggplot(data=market_size, aes(x=markettype, y=count,fill=markettype)) +
geom_bar(stat="identity")+
geom_text(aes(label=count), vjust=1.6, color="white", size=3.5)+
theme_minimal()+labs(y="Number of Markets", x="Market Type",fill="Market Type")+(ggtitle("Number of markets based on scale"))+theme_bw()+theme(plot.title = element_text(hjust = 0.5),legend.position = 'none')
theme(text = element_text(size = 14))
ggsave("Marketsize.png",height = 7,width = 17.5,dpi = 300)
